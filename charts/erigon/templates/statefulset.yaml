apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "erigon.fullname" . }}
  labels:
    {{- include "erigon.labels" . | nindent 4 }}
spec:
  serviceName: {{ template "erigon.name" . }}
  selector:
    matchLabels:
      {{- include "erigon.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "erigon.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: preprocess
        command: [ "/bin/sh", "-c" ]
        args:
          - |
            rm -rf /data{{ .Values.datadir }}/LOCK  # remove lock
            rm -rf /data{{ .Values.datadir }}/nodekey  # remove nodekey
            mkdir -p /data{{ .Values.datadir }}
            chown -R 1000:1000 /data{{ .Values.datadir }}/
            chmod -R g+w /data{{ .Values.datadir }}/
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: data
            mountPath: /data

      {{- if .Values.importTarURL }}
      - name: import-chain
        command: ["/bin/sh", "-c"]
        args:
          - |
            if [ -f "/data/imported" ]; then
            echo "already imported"
            ls /data{{ .Values.datadir }}
            else
            echo "Chain import start"
            wget -O /data/imported.tar {{ .Values.importTarURL }}  # download from URL
            rm -rf /data{{ .Values.datadir }}  # clean dir
            mkdir -p /data{{ .Values.datadir }}
            chown -R 1000:1000 /data{{ .Values.datadir }}/
            chmod -R g+w /data{{ .Values.datadir }}/
            echo "extracting tar..."
            tar -xf /data/imported.tar -C /data{{ .Values.datadir }}/
            rm -rf /data/imported.tar
            touch /data/imported
            ls /data{{ .Values.datadir }}
            echo "Chain import finished"
            fi
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: data
          mountPath: /data
      {{- end }}
      containers:
        - name: {{ template "erigon.fullname" . }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- range $key, $value := .Values.erigon.ports }}
            {{- if or $value.enabled (eq $key "authrpc") }}
            - name: {{ $key }}
              containerPort: {{ $value.port }}
            {{- end }}
            {{- end }}
          command: ["erigon"]
          args:
            # jwt
            - --authrpc.jwtsecret=/jwt/{{ .Values.erigon.jwt.existingSecret.key | default "jwtSecret" }}

            # Basic args
            {{- range $key, $value := .Values.erigon.args }}
            - --{{ $key }}={{ $value }}
            {{- end }}

            # Ports configs
            {{- range $key, $value := .Values.erigon.ports }}
            {{- if or $value.enabled (eq $key "authrpc") }}
            {{- range $config, $configValue := $value }}
            {{- if eq $config "enabled" }}
            - --{{ $key }}
            {{- else }}
            - --{{ $key }}.{{ $config }}={{ $configValue }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}

            {{- with .Values.args }}
            # Other Arguments
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 60
            tcpSocket:
              port: {{ .Values.rpc.http.port.name }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            # TODO: replace it to real http request.
            initialDelaySeconds: 15
            periodSeconds: 60
            tcpSocket:
              port: {{ .Values.rpc.http.port.name }}
          {{- end }}
          volumeMounts:
          - name: data
            mountPath: /data
          - name: jwt
            mountPath: /jwt
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: jwt
          secret:
            secretName: {{ .Values.erigon.jwt.existingSecret.name | default "jwt-secret" }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
        "helm.sh/resource-policy": keep
      labels:
        {{- include "erigon.selectorLabels" $ | nindent 8 }}
    spec:
      {{- toYaml .Values.volumeClaimSpec | nindent 8 }}
