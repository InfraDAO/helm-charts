apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "erigon.fullname" . }}
  labels:
    {{- include "erigon.labels" . | nindent 4 }}
spec:
  serviceName: {{ template "erigon.name" . }}
  selector:
    matchLabels:
      {{- include "erigon.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "erigon.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: preprocess
        command: [ "/bin/sh", "-c" ]
        args:
          - |
            rm -rf {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/LOCK  # remove lock
            rm -rf {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/nodekey  # remove nodekey
            mkdir -p {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}
            chown -R 1000:1000 {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/
            chmod -R g+w {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: {{ .Values.persistence.name }}
            mountPath: {{ .Values.persistence.mountDir }}

      {{- if .Values.importTarURL }}
      - name: import-chain
        command: ["/bin/sh", "-c"]
        args:
          - |
            if [ -f "{{ .Values.persistence.mountDir }}/imported" ]; then
            echo "already imported"
            ls {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}
            else
            echo "Chain import start"
            wget -O {{ .Values.persistence.mountDir }}/imported.tar {{ .Values.importTarURL }}  # download from URL
            rm -rf {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}  # clean dir
            mkdir -p {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}
            chown -R 1000:1000 {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/
            chmod -R g+w {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/
            echo "extracting tar..."
            tar -xf {{ .Values.persistence.mountDir }}/imported.tar -C {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}/
            rm -rf {{ .Values.persistence.mountDir }}/imported.tar
            touch {{ .Values.persistence.mountDir }}/imported
            ls {{ .Values.persistence.mountDir }}{{ .Values.dataPath }}
            echo "Chain import finished"
            fi
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: {{ .Values.persistence.name }}
          mountPath: {{ .Values.persistence.mountDir }}
      {{- end }}
      containers:
        - name: {{ template "erigon.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- if .Values.rpc.http.enabled }}
            # HTTP RPC
            - name: {{ .Values.rpc.http.port.name }}
              containerPort: {{ .Values.rpc.http.port.containerPort }}
            {{- end }}
            {{- if .Values.authrpc.enabled }}
            # AuthRPC
            - name: {{ .Values.authrpc.port.name }}
              containerPort: {{ .Values.authrpc.port.containerPort }}
            {{- end }}
            {{- if .Values.metrics.enabled }}
            # Metrics
            - name: {{ .Values.metrics.port.name }}
              containerPort: {{ .Values.metrics.port.containerPort }}
            {{- end }}
            {{- if .Values.pprof.enabled }}
            # pprof
            - name: {{ .Values.pprof.port.name }}
              containerPort: {{ .Values.pprof.port.containerPort }}
            {{- end }}
          command: ["erigon"]
          args:
            - --maxpeers={{ .Values.maxPeers }}
            - --datadir={{ .Values.persistence.mountDir }}{{ .Values.dataPath }}

            {{- if .Values.rpc.http.enabled }}
            # HTTP RPC
            - --http
            - --http.api={{.Values.rpc.http.api}}
            - --http.addr={{ .Values.rpc.http.addr }}
            - --http.port={{ .Values.rpc.http.port.containerPort }}
            - --http.corsdomain={{ .Values.rpc.http.corsDomain }}
            {{- end }}

            {{- if .Values.rpc.ws.enabled }}
            # WS RPC
            - --ws
            {{- end }}

            {{- if .Values.networkID }}
            # network settings
            - --networkid={{ .Values.networkID }}
            {{- end }}
            {{- if and .Values.predefinedNetwork (ne .Values.predefinedNetwork "optimism-goerli ")}}
            - --chain={{ .Values.predefinedNetwork }}
            {{- end }}

            {{- if .Values.authrpc.enabled }}
            # Auth RPC
            - --authrpc.addr={{ .Values.authrpc.addr }}
            - --authrpc.port={{ .Values.authrpc.port.containerPort }}
            - --authrpc.vhosts={{.Values.authrpc.vhosts}}
            - --authrpc.jwtsecret={{ .Values.secretForVolumeMountDir }}/{{.Values.authrpc.jwtSecret.filename}}
            {{- end }}

            {{- if .Values.pprof.enabled }}
            # pprof
            - --pprof
            - --pprof.addr={{ .Values.pprof.addr }}
            - --pprof.port={{ .Values.pprof.port.containerPort }}
            {{- end }}

            {{- if .Values.metrics.enabled }}
            # metrics
            - --metrics
            - --metrics.addr={{ .Values.metrics.addr }}
            - --metrics.port={{ .Values.metrics.port.containerPort }}
            {{- end }}

            {{- with .Values.args }}
            # Other Arguments
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 60
            tcpSocket:
              port: {{ .Values.rpc.http.port.name }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            # TODO: replace it to real http request.
            initialDelaySeconds: 15
            periodSeconds: 60
            tcpSocket:
              port: {{ .Values.rpc.http.port.name }}
          {{- end }}
          volumeMounts:
          - name: {{ .Values.persistence.name }}
            mountPath: {{ .Values.persistence.mountDir }}
          - mountPath: {{ .Values.secretForVolumeMountDir }} # mounts all files in the Secrets.
            name: {{ include "erigon.secretname" . }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: {{ include "erigon.secretname" . }}
          secret:
            secretName: {{ include "erigon.secretname" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.persistence.name }}
      annotations:
        "helm.sh/resource-policy": keep
      labels:
        {{- include "erigon.selectorLabels" . | nindent 8 }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
