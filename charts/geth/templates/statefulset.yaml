apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "geth.fullname" . }}
  labels:
    {{- include "geth.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "geth.fullname" . }}
  selector:
    matchLabels:
      {{- include "geth.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "geth.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
      - name: preprocess
        command: ["/bin/sh", "-c"]
        args:
          - |
            rm -rf /data{{ .Values.geth.datadir }}/geth/LOCK  # remove lock
            rm -rf /data{{ .Values.geth.datadir }}/geth/nodekey  # remove nodekey
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: data
          mountPath: /data
      {{- if .Values.importTarURL }}
      - name: import-chain
        command: ["/bin/sh", "-c"]
        args:
          - |
            if [ -f "/data/imported" ]; then
            echo "already imported"
            ls /root/data
            else
            echo "Chain import start"
            wget -O /data/imported.tar {{ .Values.importTarURL }}  # download from URL
            rm -rf /data{{ .Values.geth.datadir }}  # clean dir
            mkdir -p /data{{ .Values.geth.datadir }}
            tar -xf /data/imported.tar -C /data{{ .Values.geth.datadir }}/
            rm -rf /data/imported.tar
            touch /data/imported
            ls /data{{ .Values.geth.datadir }}
            echo "Chain import finished"
            fi
        image: busybox
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: data
          mountPath: /data
      {{- end }}
      containers:
        - name: {{ template "geth.fullname" . }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- range $key, $value := .Values.geth.ports }}
            {{- if or $value.enabled (eq $key "authrpc") }}
            - name: {{ $key }}
              containerPort: {{ $value.port }}
            {{- end }}
            {{- end }}
          command: ["/usr/local/bin/geth"]
          args:
            # Basic geth configs
            - --op-network={{ .Values.geth.network }}
            - --datadir={{ .Values.geth.datadir }}
            - --syncmode={{ .Values.geth.syncmode }}
            - --rollup.sequencerhttp={{ .Values.geth.rollup.sequencerhttp }}

            # Loop through geth.ports values to set configs
            {{- range $key, $value := .Values.geth.ports }}
            {{- if or $value.enabled (eq $key "authrpc") }}
            {{- range $config, $configValue := $value }}
            {{- if eq $config "enabled" }}
            - --{{ $key }}
            {{- else }}
            - --{{ $key }}.{{ $config }}={{ $configValue }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}

            {{- if .Values.importTarURL }}
            # GC archive mode is required when we import the chain. Otherwise, imported data will be removed.
            - --gcmode=archive
            {{- end }}

            {{- with .Values.extraArgs }}
            # Other Arguments
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if and .Values.livenessProbe .Values.geth.http.enabled }}
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 60
            tcpSocket:
              port: http-rpc
          {{- end }}
          {{- if and .Values.readinessProbe .Values.geth.http.enabled }}
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 60
            tcpSocket:
              port: http-rpc
          {{- end }}
          volumeMounts:
          - name: data
            mountPath: /data
          - name: jwt
            mountPath: /jwt
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: jwt
          secret:
            secretName: {{ .Values.geth.jwt.existingSecret.name | default "jwt-secret" }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
        "helm.sh/resource-policy": keep
      labels:
        {{- include "geth.selectorLabels" $ | nindent 8 }}
    spec:
      {{- toYaml .Values.volumeClaimSpec | nindent 8 }}
